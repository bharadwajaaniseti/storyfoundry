          {/* Detail View */}
          <div className="flex-1 overflow-y-auto bg-gray-50">
            {selectedContent ? (
              <div className="h-full">
                {/* Header */}
                <div className="bg-white border-b border-gray-200 px-6 py-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center">
                        {(() => {
                          const Icon = getItemIcon(selectedContent.type)
                          return <Icon className="w-6 h-6 text-orange-600" />
                        })()}
                      </div>
                      <div>
                        <div className="flex items-center space-x-2">
                          <h1 className="text-xl font-bold text-gray-900">{selectedContent.name}</h1>
                          {selectedContent.is_favorite && (
                            <Star className="w-4 h-4 text-yellow-500 fill-current" />
                          )}
                        </div>
                        <div className="flex items-center space-x-2 mt-1">
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                            {CONTENT_TYPES.find(t => t.id === selectedContent.type)?.label || 'Unknown'}
                          </span>
                          {selectedContent.attributes?.url && (
                            <a
                              href={selectedContent.attributes.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-orange-600 hover:text-orange-700 transition-colors"
                            >
                              <ExternalLink className="w-4 h-4" />
                            </a>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => toggleContentFavorite(selectedContent)}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                      >
                        <Star className={`w-4 h-4 mr-2 ${selectedContent.is_favorite ? 'text-yellow-500 fill-current' : 'text-gray-400'}`} />
                        Favorite
                      </button>
                      <button
                        onClick={() => editContent(selectedContent)}
                        className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                      >
                        <Edit3 className="w-4 h-4 mr-2" />
                        Edit
                      </button>
                      <button
                        onClick={() => deleteContent(selectedContent.id)}
                        className="inline-flex items-center px-3 py-2 border border-red-300 rounded-lg text-sm font-medium text-red-700 bg-white hover:bg-red-50 transition-colors"
                      >
                        <Trash2 className="w-4 h-4 mr-2" />
                        Delete
                      </button>
                    </div>
                  </div>
                </div>

                {/* Content */}
                <div className="p-6 space-y-6">
                  {/* Description Section */}
                  <div className="bg-white border border-gray-200 rounded-xl p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Description</h3>
                    <p className="text-gray-700 leading-relaxed">
                      {selectedContent.description || 'No description provided.'}
                    </p>
                  </div>

                  {/* Content Section */}
                  {selectedContent.content && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Content</h3>
                      <div className="prose prose-gray max-w-none">
                        <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                          {selectedContent.content}
                        </p>
                      </div>
                    </div>
                  )}

                  {/* Files Section for multiple files */}
                  {selectedContent.attributes?.file_urls && selectedContent.attributes.file_urls.length > 0 && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">
                        Files ({selectedContent.attributes.file_count || selectedContent.attributes.file_urls.length})
                      </h3>
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        {selectedContent.attributes.file_urls.map((url: string, index: number) => (
                          <div key={index} className="group relative">
                            <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                              {selectedContent.type === 'image' ? (
                                <img 
                                  src={url} 
                                  alt={selectedContent.attributes?.file_names?.[index] || `Image ${index + 1}`}
                                  className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
                                />
                              ) : (
                                <div className="w-full h-full flex items-center justify-center">
                                  <div className="text-center">
                                    {(() => {
                                      const Icon = getItemIcon(selectedContent.type)
                                      return <Icon className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                                    })()}
                                    <p className="text-xs text-gray-500 truncate px-2">
                                      {selectedContent.attributes?.file_names?.[index] || `File ${index + 1}`}
                                    </p>
                                  </div>
                                </div>
                              )}
                            </div>
                            <a
                              href={url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="absolute inset-0 rounded-lg bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-200 flex items-center justify-center"
                            >
                              <ExternalLink className="w-5 h-5 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
                            </a>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Link Section */}
                  {selectedContent.attributes?.url && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Link</h3>
                      <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                        <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                          <ExternalLink className="w-5 h-5 text-green-600" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <a
                            href={selectedContent.attributes.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-orange-600 hover:text-orange-700 font-medium truncate block"
                          >
                            {selectedContent.attributes.url}
                          </a>
                          <p className="text-sm text-gray-500">External link</p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* Tags Section */}
                  {selectedContent.tags && selectedContent.tags.length > 0 && (
                    <div className="bg-white border border-gray-200 rounded-xl p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Tags</h3>
                      <div className="flex flex-wrap gap-2">
                        {selectedContent.tags.map((tag, index) => (
                          <span
                            key={index}
                            className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
                          >
                            <Hash className="w-3 h-3 mr-1" />
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Information Section */}
                  <div className="bg-white border border-gray-200 rounded-xl p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Information</h3>
                    <div className="grid grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Created</label>
                        <div className="flex items-center text-gray-600">
                          <Calendar className="w-4 h-4 mr-2" />
                          <span className="text-sm">
                            {new Date(selectedContent.created_at).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Last Updated</label>
                        <div className="flex items-center text-gray-600">
                          <Clock className="w-4 h-4 mr-2" />
                          <span className="text-sm">
                            {new Date(selectedContent.updated_at).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ) : (